 /*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>

#include <behaviors/mouse_keys.dtsi>
#define DEFAULT 0
#define UPPER 1
#define LOWER 2
#define GAME 3

#define NUM_L 1 2 3 4 5
#define NUM_R 6 7 8 9 10

#define ALPHA_L 13 14 15 16 17 \
                25 26 27 28 29 \
                37 38 39 40 41 42
#define ALPHA_R 18 19 20 21 22 \
                30 31 32 33 34 \
             43 44 45 46 47 48

#define MACRO_L 0 12 24 36
#define MACRO_R 11 23 35 49

#define THUMBS 50 51 52 53 54

/ {
    combos {
        compatible = "zmk,combos";
        // symbols
        combo_sqt {
            timeout-ms = <50>;
            key-positions = <14 15>;
            layers = <1>;
            bindings = <&kp SQT>;
        };
        combo_dqt {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <1>;
            bindings = <&kp DQT>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <19 20>;
            layers = <1>;
            bindings = <&kp LPAR>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <1>;
            bindings = <&kp RPAR>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <31 32>;
            layers = <1>;
            bindings = <&kp LBKT>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <32 33>;
            layers = <1>;
            bindings = <&kp RBKT>;
        };
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <45 46>;
            layers = <1>;
            bindings = <&kp LBRC>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <46 47>;
            layers = <1>;
            bindings = <&kp RBRC>;
        }; 

        combo_gamelayer {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&tog 3>;
        };
    };

    behaviors {
        bhml: balanced_homerow_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <80>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <NUM_R ALPHA_R MACRO_R THUMBS>;    // <---[[the W key]]
            hold-trigger-on-release;
        };

        bhmr: balanced_homerow_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <80>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <NUM_L ALPHA_L MACRO_L THUMBS>;    // <---[[the W key]]
            hold-trigger-on-release;
        };
 
        capstd: tap_dance_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&caps_word>, <&kp CAPS>;
        };

        alttabtd: tap_dance_alttab {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp TAB>, <&kp LA(TAB)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
 
        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |
            bindings = <
&kp ESC   &kp N1        &kp N2        &kp N3         &kp N4          &kp N5                   /**/            &kp N6     &kp N7          &kp N8         &kp N9        &kp N0           &kp GRAVE
&kp TAB   &kp Q         &kp W         &kp E          &kp R           &kp T                    /**/            &kp Y      &kp U           &kp I          &kp O         &kp P            &kp MINUS
&capstd   &bhml LGUI A  &bhml LALT S  &bhml LCTRL D  &bhml LSHIFT F  &kp G                    /**/            &kp H      &bhmr RSHIFT J  &bhmr RCTRL K  &bhmr RALT L  &bhmr RGUI SEMI  &kp EQUAL
&to 3     &kp Z         &kp X         &kp C          &kp V           &kp B        &kp LBKT    /**/   &kp RBKT &kp N      &kp M           &lt 2 COMMA    &kp DOT       &kp FSLH         &kp BSLH
                                                     &lt 2 LANG1     &lt 1 SPACE  &lt 2 DEL   /**/   &kp BSPC &lt 1 RET                             
            >;
        };

        upper_layer {
            bindings = <
&kp ESC    &kp F1     &kp F2      &kp F3     &kp F4     &kp F5             /**/           &kp F6  &kp F7     &kp F8    &kp F9     &kp F10   &kp F11
&kp TAB    &kp Q      &kp SQT     &kp DQT    &kp R      &kp T              /**/           &kp Y   &kp U      &kp UP    &kp O      &kp P     &kp UNDER
&kp CAPS   &kp LC(A)  &kp LC(S)   &trans     &trans     &kp G              /**/           &kp H   &kp LEFT   &kp DOWN  &kp RIGHT  &kp SEMI  &kp SQT
&kp LC(Y)  &kp LC(Z)  &kp LC(X)   &kp LC(C)  &kp LC(V)  &kp B     &kp LBKT /**/  &kp RBKT &kp N   &mkp LCLK  &mkp SCLK  &mkp RCLK  &kp FSLH  &kp DQT 
&kp RET    &kp SPACE &kp DEL  /**/  &kp BSPC &kp RET                             
            >;
        };

        lower_layer {
            bindings = <
&kp ESC    &kp N1     &kp N2      &kp N3         &kp N4        &kp N5       /**/        &kp N6 &kp N7        &kp N8        &kp N9       &kp N0   &kp GRAVE
&kp TAB    &kp Q      &kp W       &kp E         &kp R         &kp T        /**/        &kp Y  &kp U         &kp UP         &kp O        &kp P    &kp EQUAL
&kp CAPS   &kp A      &trans      &trans     &trans     &kp G        /**/        &kp H    &kp LEFT  &kp DOWN &kp RIGHT &kp SEMI   &kp MINUS
&kp LC(Y)  &kp LC(Z)  &kp LC(X)   &kp LC(C)  &kp LC(V)  &kp B     &kp LBKT /**/  &kp RBKT &kp N         &kp LCLK     &kp SCLK    &kp RCLK  &kp FSLH &kp BSLH
                                             &kp RET    &kp SPACE &kp DEL  /**/  &kp BSPC &kp RET                             
            >;
        };

        game_layer {
            bindings = <
&kp ESC         &bhml LC(N1) N1  &bhml LC(N2) N2  &bhml LC(N3) N3  &bhml LC(N4) N4  &bhml LC(N5) N5            /**/            &kp N6     &kp N7        &kp N8        &kp N9       &kp N0         &kp GRAVE
&bhml LC(F2) F2  &kp Q           &kp W           &kp E           &kp R           &bhml LCTRL T              /**/            &kp Y      &kp U         &kp I         &kp O        &kp P          &kp MINUS
&bhml LC(F3) F3  &kp A           &kp S           &kp D           &kp F           &bhml LSHIFT G             /**/            &kp H      &bhmr RSHFT J  &bhmr RCTRL K  &bhmr RALT L  &bhmr RGUI SEMI &kp EQUAL
&bhml LC(F4) F4  &kp Z           &kp X           &kp C           &kp V           &bhml LALT B     &kp LBKT  /**/   &kp RBKT &kp N      &kp M         &lt 2 COMMA   &kp DOT      &kp FSLH       &kp BSLH
                                                                &lt 2 LANG1     &lt 1 SPACE     &kp TAB   /**/   &kp BSPC &lt 1 RET                             
            >;
        };
    };
};
